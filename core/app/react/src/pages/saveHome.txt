import React, { useState, useEffect } from 'react';
import { Typography, Box, Grid, Autocomplete, TextField } from '@mui/material';
import { Dropdown } from '@mui/base';
import '../styles/Category.css';
import SegmentDisplay from '../components/SegmentDisplay';
import { db } from '../config/firebase';
import { getDocs, deleteDoc, updateDoc, collection, doc, query, where } from "firebase/firestore"
import { TableContainer, Table, TableHead, TableRow, TableCell, TableBody, Paper } from '@mui/material';


// import '../styles/Category.css';
const stylesTableContainer = {
  borderRadius: '15px', // Adjust the radius as needed
  boxShadow: '0px 4px 6px rgba(0, 0, 0, 0.1)', // Add a shadow
};

export default function Category({ categories, category }) {
  const [ segments, setSegments ] = useState([]);

  const notesCollectionRef = collection(db, "notes");

  const getNotesList = async () => {
    try {
      // const queryRef = query(notesCollectionRef, where('userName', '==', 'Joe')); //TODO: CHANGE THIS LATER
      const data = await getDocs(notesCollectionRef);
      const filteredData = data.docs.map((doc) => ({
        ...doc.data(),
        id: doc.id,
      }));
      setSegments(filteredData);
      console.log(data)
    } catch (err) {
      console.error(err);
    }
  };
  const [ selected, setSelected ] = useState([]);

  // useEffect here to pull from db and place into segments
  useEffect(() => {
    getNotesList();
  }, [segments])

  const deleteSegment = async (id) => {
    console.log("deleting ", id)
    const notesDoc = doc(db, "notes", id);
    await deleteDoc(notesDoc);
  };

  const updateSegment = async (id, paragraph) => {
    console.log("updating ", id)
    const notesDoc = doc(db, "notes", id);
    await updateDoc(notesDoc, { text: paragraph });
  };



  function createData(note, date, sentiment) {
    return { note, date, sentiment};
  }
  const rows = [
    createData('pain', '10/10/2021', 'sad'),createData('pain', '10/10/2021', 'sad'),createData('pain', '10/10/2021', 'sad')
  ];

  return (
    <div class = "container">

      <Typography fontSize = "50px" fontFamily="times new roman" color = "#3f3430" padding = "50px">{category}</Typography>
      <Dropdown defaultOpen sx={{ margin: '10px' }}></Dropdown>


      <Box>
      <Autocomplete
          multiple
          options={['Sadness', 'Joy', 'Love', 'Anger', 'Fear', 'Surprise']}
          renderInput={(params) => (
            <TextField
              {...params}
              variant="standard"
              label="Filter by sentiment below:"
              placeholder="all"
            />
          )}
          onChange={(event, newVal) => setSelected(newVal)}
        />
        <TableContainer component={Paper} sx={stylesTableContainer}>
          <Table sx={{ minWidth: 1000, minHeight: 400 }} fontFamily = "times new roman">
            <TableHead>
              <TableRow>
                <TableCell sx={{ fontSize: "18px", color: "#3f3430",fontFamily:"Times new roman" }}>Entries</TableCell>
                <TableCell sx={{ fontSize: "18px", color: "#3f3430",fontFamily:"Times new roman" }} align="right">Sentiment</TableCell>
                <TableCell sx={{ fontSize: "18px", color: "#3f3430",fontFamily:"Times new roman" }} align="right">Date</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {rows.map((row) => (
                <TableRow key={row.note}>
                  <TableCell component="th" scope="row">
                    {row.note}
                  </TableCell>
                  <TableCell align="right">{row.sentiment}</TableCell>
                  <TableCell align="right">{row.date}</TableCell>

                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      </Box>



      <Box sx={{
        borderRadius: '10px', // Set the border radius
        boxShadow: '0px 4px 6px rgba(0, 0, 0, 0.1)', // Add a shadow
        padding: '20px', // Add some padding for content
        width: 500,
        maxHeight: 600,
        backgroundColor: "lightblue",
        overflow: "auto",
        justifyContent: 'center',
        alignItems: 'center'
      }}>

        { segments.filter((segment) => {
          if (selected.length === 0)
            return true;

          for (let i = 0; i < selected.length; i++) {
            if (selected[i] === segment.sentiment)
              return true;
          }

          return false;
        }).map((filteredSegment) => <SegmentDisplay
          segment={filteredSegment}
          segmentID={filteredSegment.id}
          removeSeg={deleteSegment}
          updateSeg={updateSegment}/>
        )}
      </Box>
    </div>
  );
}