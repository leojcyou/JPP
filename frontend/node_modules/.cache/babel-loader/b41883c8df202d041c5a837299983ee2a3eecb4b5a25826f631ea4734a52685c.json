{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\qianx\\\\Desktop\\\\Coding\\\\JPP\\\\frontend\\\\src\\\\pages\\\\Category.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Typography, Box, Grid, Autocomplete, TextField } from '@mui/material';\nimport { Dropdown } from '@mui/base';\nimport '../styles/Category.css';\nimport SegmentDisplay from '../components/SegmentDisplay';\nimport { db } from '../config/firebase';\nimport { getDocs, collection } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Category({\n  categories,\n  category\n}) {\n  _s();\n  const [segments, setSegments] = useState([{\n    text: \"that bitch carol at work was so annoying\",\n    timestamp: 123456,\n    sentiment: \"anger\"\n  }, {\n    text: \"i wish i was better at among us\",\n    timestamp: 654321,\n    sentiment: \"sadness\"\n  }]);\n  const notesCollectionRef = collection(db, \"notes\");\n  const getMovieList = async () => {\n    try {\n      const data = await getDocs(notesCollectionRef);\n      const filteredData = data.docs.map(doc => ({\n        ...doc.data(),\n        id: doc.id\n      }));\n      setSegments(filteredData);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  const [selected, setSelected] = useState([]);\n\n  // useEffect here to pull from db and place into segments\n  useEffect(() => {\n    getMovieList();\n  }, [segments]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: \"Category chosen:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      children: category\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n      defaultOpen: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        borderRadius: '10px',\n        // Set the border radius\n        boxShadow: '0px 4px 6px rgba(0, 0, 0, 0.1)',\n        // Add a shadow\n        padding: '20px',\n        // Add some padding for content\n        width: 500,\n        maxHeight: 600,\n        backgroundColor: \"lightblue\",\n        overflow: \"auto\",\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n        multiple: true,\n        options: ['anger', 'sadness'],\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n          ...params,\n          variant: \"standard\",\n          label: \"Filter by sentiment below:\",\n          placeholder: \"all\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this),\n        onChange: (event, newVal) => setSelected(newVal)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), segments.filter(segment => {\n        if (selected.length === 0) return true;\n        for (let i = 0; i < selected.length; i++) {\n          if (selected[i] === segment.sentiment) return true;\n        }\n        return false;\n      }).map(filteredSegment => /*#__PURE__*/_jsxDEV(SegmentDisplay, {\n        segment: filteredSegment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 37\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(Category, \"cnYe75V7ppJNLI0foO2qb+DqkKg=\");\n_c = Category;\nvar _c;\n$RefreshReg$(_c, \"Category\");","map":{"version":3,"names":["React","useState","useEffect","Typography","Box","Grid","Autocomplete","TextField","Dropdown","SegmentDisplay","db","getDocs","collection","jsxDEV","_jsxDEV","Category","categories","category","_s","segments","setSegments","text","timestamp","sentiment","notesCollectionRef","getMovieList","data","filteredData","docs","map","doc","id","err","console","error","selected","setSelected","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","defaultOpen","sx","borderRadius","boxShadow","padding","width","maxHeight","backgroundColor","overflow","justifyContent","alignItems","multiple","options","renderInput","params","label","placeholder","onChange","event","newVal","filter","segment","length","i","filteredSegment","_c","$RefreshReg$"],"sources":["C:/Users/qianx/Desktop/Coding/JPP/frontend/src/pages/Category.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Typography, Box, Grid, Autocomplete, TextField } from '@mui/material';\r\nimport { Dropdown } from '@mui/base';\r\nimport '../styles/Category.css';\r\nimport SegmentDisplay from '../components/SegmentDisplay';\r\nimport { db } from '../config/firebase';\r\nimport { getDocs, collection } from \"firebase/firestore\"\r\n\r\nexport default function Category({ categories, category }) {\r\n  const [ segments, setSegments ] = useState([\r\n    {\r\n      text: \"that bitch carol at work was so annoying\",\r\n      timestamp: 123456,\r\n      sentiment: \"anger\"\r\n    },\r\n    {\r\n      text: \"i wish i was better at among us\",\r\n      timestamp: 654321,\r\n      sentiment: \"sadness\"\r\n    },\r\n  ]);\r\n  \r\n  const notesCollectionRef = collection(db, \"notes\");\r\n\r\n  const getMovieList = async () => {\r\n    try {   \r\n      const data = await getDocs(notesCollectionRef);\r\n      const filteredData = data.docs.map((doc) => ({\r\n        ...doc.data(),\r\n        id: doc.id,\r\n      }));\r\n      setSegments(filteredData);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n  const [ selected, setSelected ] = useState([]);\r\n\r\n  // useEffect here to pull from db and place into segments\r\n  useEffect(() => {\r\n    getMovieList();\r\n  }, [segments])\r\n\r\n  return (\r\n    <div>\r\n      <Typography variant=\"h6\">Category chosen:</Typography>\r\n      <Typography variant=\"h5\">{category}</Typography>\r\n      <Dropdown defaultOpen></Dropdown>\r\n      <Box sx={{\r\n        borderRadius: '10px', // Set the border radius\r\n        boxShadow: '0px 4px 6px rgba(0, 0, 0, 0.1)', // Add a shadow\r\n        padding: '20px', // Add some padding for content\r\n        width: 500,\r\n        maxHeight: 600,\r\n        backgroundColor: \"lightblue\",\r\n        overflow: \"auto\",\r\n        justifyContent: 'center',\r\n        alignItems: 'center'  \r\n      }}>\r\n        <Autocomplete\r\n          multiple\r\n          options={['anger', 'sadness']}\r\n          renderInput={(params) => (\r\n            <TextField\r\n              {...params}\r\n              variant=\"standard\"\r\n              label=\"Filter by sentiment below:\"\r\n              placeholder=\"all\"\r\n            />\r\n          )}\r\n          onChange={(event, newVal) => setSelected(newVal)}\r\n        />\r\n        { segments.filter((segment) => {\r\n          if (selected.length === 0)\r\n            return true;\r\n            \r\n          for (let i = 0; i < selected.length; i++) {\r\n            if (selected[i] === segment.sentiment)\r\n              return true;\r\n          }\r\n\r\n          return false;\r\n        }).map((filteredSegment) => <SegmentDisplay segment={filteredSegment}/>) }\r\n      </Box>\r\n    </div>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}